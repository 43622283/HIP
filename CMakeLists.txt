cmake_minimum_required(VERSION 2.6)
project(hip_hcc)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release")
endif()

add_subdirectory(clang-hipify)

if(NOT DEFINED HCC_HOME)
    if(NOT DEFINED ENV{HCC_HOME})
        set(HCC_HOME "/opt/hcc" CACHE PATH "Path to which HCC has been installed")
    else()
        set(HCC_HOME $ENV{HCC_HOME} CACHE PATH "Path to which HCC has been installed")
    endif()
endif()
if(IS_ABSOLUTE ${HCC_HOME} AND EXISTS ${HCC_HOME} AND IS_DIRECTORY ${HCC_HOME})
    message(STATUS "Looking for HCC in: " ${HCC_HOME})
else()
    message(FATAL_ERROR "Don't know where to find HCC. Please specify abolute path using -DHCC_HOME")
endif()

if(NOT DEFINED HSA_PATH)
    if(NOT DEFINED ENV{HSA_PATH})
        set(HSA_PATH "/opt/hsa" CACHE PATH "Path to which HSA runtime has been installed")
    else()
        set(HSA_PATH $ENV{HSA_PATH} CACHE PATH "Path to which HSA runtime has been installed")
    endif()
endif()
if(IS_ABSOLUTE ${HSA_PATH} AND EXISTS ${HSA_PATH} AND IS_DIRECTORY ${HSA_PATH})
    message(STATUS "Looking for HSA runtime in: " ${HSA_PATH})
else()
    message(FATAL_ERROR "Don't know where to find HSA runtime. Please specify absolute path using -DHSA_PATH")
endif()

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT AND CMAKE_INSTALL_PREFIX MATCHES "/usr/local")
    if(CMAKE_BUILD_TYPE MATCHES Debug)
            set(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR} CACHE PATH "Installation path for HIP" FORCE)
    elseif(CMAKE_BUILD_TYPE MATCHES Release)
            set(CMAKE_INSTALL_PREFIX "/opt/hip" CACHE PATH "Installation path for HIP" FORCE)
    else()
        message(FATAL_ERROR "Invalid CMAKE_BUILD_TYPE specified. Valid values are Debug and Release")
    endif()
endif()
if(IS_ABSOLUTE ${CMAKE_INSTALL_PREFIX})
    message(STATUS "HIP will be installed in: " ${CMAKE_INSTALL_PREFIX})
else()
    message(FATAL_ERROR "Don't know where to install HIP. Please specify absolute path using -DCMAKE_INSTALL_PREFIX")
endif()

include_directories(${PROJECT_SOURCE_DIR}/include)

set(CMAKE_CXX_COMPILER "${HCC_HOME}/bin/hcc")
set(CMAKE_C_COMPILER   "${HCC_HOME}/bin/hcc")

set(CMAKE_CXX_FLAGS " -hc -I${HCC_HOME}/include -I${HSA_PATH}/include -stdlib=libc++ ")
set(CMAKE_C_FLAGS   " -hc -I${HCC_HOME}/include -I${HSA_PATH}/include -stdlib=libc++ ")

set(SOURCE_FILES src/device_util.cpp
)

if(NOT DEFINED ENV{HIP_USE_SHARED_LIBRARY})
    set(HIP_USE_SHARED_LIBRARY 0)
else()
    set(HIP_USE_SHARED_LIBRARY $ENV{HIP_USE_SHARED_LIBRARY})
endif()

#add_library(hip_hcc STATIC ${SOURCE_FILES})
if(${HIP_USE_SHARED_LIBRARY} EQUAL 1)
    add_library(hip_hcc SHARED ${SOURCE_FILES})
else()
    add_library(hip_hcc OBJECT ${SOURCE_FILES})
endif()

#install(TARGETS hip_hcc DESTINATION lib)
if(${HIP_USE_SHARED_LIBRARY} EQUAL 1)
    install(TARGETS hip_hcc DESTINATION lib)
else()
    install(DIRECTORY ${PROJECT_BINARY_DIR}/CMakeFiles/hip_hcc.dir/src/ DESTINATION lib)
endif()
set(EXECUTE_COMMAND test ${CMAKE_INSTALL_PREFIX} -ef ${CMAKE_CURRENT_SOURCE_DIR})
execute_process(COMMAND ${EXECUTE_COMMAND} RESULT_VARIABLE INSTALL_SOURCE)
if(NOT ${INSTALL_SOURCE} EQUAL 0)
    install(DIRECTORY src DESTINATION .)
    install(DIRECTORY bin DESTINATION . USE_SOURCE_PERMISSIONS)
    install(DIRECTORY include DESTINATION .)
endif()

